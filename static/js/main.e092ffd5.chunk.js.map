{"version":3,"sources":["components/EmpForm.js","components/EmpList.js","App.js","serviceWorker.js","index.js"],"names":["EmpForm","state","returnStateObject","inputChangeHandler","event","setState","target","name","value","submitHandler","preventDefault","props","onAddOrEdit","this","currentIndex","designation","age","joining","list","prevProps","length","onSubmit","autoComplete","className","type","placeholder","onChange","Component","EmpList","returnList","data","push","localStorage","setItem","JSON","stringify","editHandler","index","deleteHandler","splice","getItem","parse","map","item","key","color","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e092ffd5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './EmpForm.css';\r\n\r\nclass EmpForm extends Component {\r\n    state = {\r\n        ...this.returnStateObject()\r\n    }\r\n\r\n    returnStateObject(){\r\n        if(this.props.currentIndex == -1)\r\n        return{\r\n            name:'',\r\n            designation:'',\r\n            age:'',\r\n            joining:''\r\n        }\r\n        else\r\n            return this.props.list[this.props.currentIndex]\r\n    }\r\n\r\n    componentDidUpdate(prevProps){\r\n        if(prevProps.currentIndex != this.props.currentIndex || prevProps.list.length != this.props.list.length)\r\n        this.setState({\r\n            ...this.returnStateObject()\r\n        })\r\n    }\r\n\r\n    inputChangeHandler = (event) =>{\r\n        this.setState({\r\n            [event.target.name]: event.target.value,\r\n        })\r\n    }\r\n\r\n    submitHandler = (event) =>{\r\n        event.preventDefault()\r\n        this.props.onAddOrEdit(this.state)\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div> \r\n                <form onSubmit={this.submitHandler} autoComplete=\"off\" className=\"empForm\">\r\n                    <h3>Employees Form</h3>\r\n                    <table>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                Emp Name:\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                <input type=\"text\" placeholder=\"Enter employee name\" name=\"name\" value={this.state.name} onChange={this.inputChangeHandler}/>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                Designation:\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                <input type=\"text\" placeholder=\"Enter employee designation\" name=\"designation\" value={this.state.designation} onChange={this.inputChangeHandler} />\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                Age:\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                <input type=\"number\" placeholder=\"Enter employee age\" name=\"age\" value={this.state.age} onChange={this.inputChangeHandler} />\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                Date of Joining:\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                <input type=\"date\" placeholder=\"Enter joining date\" name=\"joining\" value={this.state.joining} onChange={this.inputChangeHandler} />\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                    <button type=\"submit\">Submit</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EmpForm;","import React, { Component } from 'react';\r\nimport { FaRegTrashAlt, FaPencilAlt } from 'react-icons/fa';\r\nimport './EmpList.css';\r\nimport EmpForm from './EmpForm';\r\n\r\nclass EmpList extends Component {\r\n    state = {\r\n        currentIndex:-1,\r\n        list:this.returnList()\r\n    }\r\n\r\n    returnList(){\r\n        if(localStorage.getItem('empDetails') == null)\r\n        localStorage.setItem('empDetails', JSON.stringify([]))\r\n        return JSON.parse(localStorage.getItem('empDetails'))\r\n    }\r\n\r\n    onAddOrEdit = (data) =>{\r\n        var list = this.returnList()\r\n        if(this.state.currentIndex == -1)\r\n        list.push(data)\r\n        else\r\n        list[this.state.currentIndex] = data\r\n        localStorage.setItem('empDetails', JSON.stringify(list))\r\n        this.setState({\r\n            list:list,\r\n            currentIndex:-1\r\n        })\r\n    }\r\n\r\n    editHandler = (index) =>{\r\n        this.setState({\r\n            currentIndex:index\r\n        })\r\n    }\r\n\r\n    deleteHandler = (index) =>{\r\n        var list = this.returnList()\r\n        list.splice(index, 1)\r\n        localStorage.setItem('empDetails', JSON.stringify(list))\r\n        this.setState({\r\n            list:list,\r\n            currentIndex:-1\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <EmpForm \r\n                onAddOrEdit={this.onAddOrEdit}\r\n                currentIndex={this.state.currentIndex}\r\n                list={this.state.list}\r\n                />\r\n                <div className=\"empList\">\r\n                <h3>Employees Details</h3>\r\n               <table className=\"empData\">\r\n                   <thead>\r\n                    <tr className=\"tableHeading\">\r\n                        <th>Name</th>\r\n                        <th>Designation</th>\r\n                        <th>Age</th>\r\n                        <th>Date of Joining</th>\r\n                        <th>Edit</th>\r\n                        <th>Delete</th>\r\n                    </tr>\r\n                   </thead>\r\n                   <tbody>\r\n                    {\r\n                    this.state.list.map((item, index) =>{\r\n                        return <tr key={index}>\r\n                        <td>{item.name}</td>\r\n                        <td>{item.designation}</td>\r\n                        <td>{item.age}</td>\r\n                        <td>{item.joining}</td>\r\n                        <td><FaPencilAlt color=\"#4267b2\" onClick={() => this.editHandler(index)}/></td>\r\n                        <td><FaRegTrashAlt color=\"red\" onClick={() => this.deleteHandler(index)}/></td>\r\n                    </tr>\r\n                    })}\r\n                    </tbody>\r\n               </table>\r\n               </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EmpList;","import React from 'react';\nimport './App.css';\nimport EmpList from './components/EmpList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <h2>Employees Database</h2>\n      </div>\n      <EmpList/> \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}